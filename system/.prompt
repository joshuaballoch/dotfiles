## Prompt

_bash_prompt_config() {

    if $SHELL_BASH; then
        local USER_SYMBOL="\u"
        local HOST_SYMBOL="\h"
        local ESC_OPEN="\["
        local ESC_CLOSE="\]"
    else
        # Assume zsh
        local USER_SYMBOL="%n"
        local HOST_SYMBOL=%m
        local ESC_OPEN="%{"
        local ESC_CLOSE="%}"
    fi


    if tput setaf >/dev/null 2>&1 ; then
        _setaf () { tput setaf "$1" ; }
        RESET_INNER="$( { tput sgr0 || tput me ; } 2>/dev/null )"
        local RESET="${ESC_OPEN}${RESET_INNER}${ESC_CLOSE}"
        local BOLD="$( { tput bold || tput md ; } 2>/dev/null )"
    else
        # Fallback
        _setaf () { echo "\033[0;$(($1+30))m" ; }
        local RESET="\033[m"
        local BOLD=""
        ESC_OPEN=""
        ESC_CLOSE=""
    fi

    # Normal colors
    local BLACK="${ESC_OPEN}$(_setaf 0)${ESC_CLOSE}"
    local RED="${ESC_OPEN}$(_setaf 1)${ESC_CLOSE}"
    # local GREEN="${ESC_OPEN}$(_setaf 2)${ESC_CLOSE}"
    # Brighter green when using dark
    local GREEN="${ESC_OPEN}$(_setaf 40)${ESC_CLOSE}"
    local YELLOW="${ESC_OPEN}$(_setaf 3)${ESC_CLOSE}"
    # local BLUE="${ESC_OPEN}$(_setaf 4)${ESC_CLOSE}"
    # Brighter blue when using dark
    # local BLUE="${ESC_OPEN}$(_setaf 4)${ESC_CLOSE}"
    local BLUE="${ESC_OPEN}$(_setaf 39)${ESC_CLOSE}"
    local VIOLET="${ESC_OPEN}$(_setaf 5)${ESC_CLOSE}"
    # Brighter pink when using dark
    # local PINK="${ESC_OPEN}$(_setaf 162)${ESC_CLOSE}"
    local PINK="${ESC_OPEN}$(_setaf 198)${ESC_CLOSE}"
    local CYAN="${ESC_OPEN}$(_setaf 6)${ESC_CLOSE}"
    local WHITE="${ESC_OPEN}$(_setaf 7)${ESC_CLOSE}"

    # Bold colors
    local BLACK_BOLD="${ESC_OPEN}${BOLD}$(_setaf 0)${ESC_CLOSE}"
    local RED_BOLD="${ESC_OPEN}${BOLD}$(_setaf 1)${ESC_CLOSE}"
    # local GREEN_BOLD="${ESC_OPEN}${BOLD}$(_setaf 2)${ESC_CLOSE}"
    # Brighter green when using dark
    local GREEN_BOLD="${ESC_OPEN}${BOLD}$(_setaf 40)${ESC_CLOSE}"
    local YELLOW_BOLD="${ESC_OPEN}${BOLD}$(_setaf 3)${ESC_CLOSE}"
    # Brighter blue when using dark
    # local BLUE_BOLD="${ESC_OPEN}${BOLD}$(_setaf 4)${ESC_CLOSE}"
    local BLUE_BOLD="${ESC_OPEN}${BOLD}$(_setaf 39)${ESC_CLOSE}"
    local VIOLET_BOLD="${ESC_OPEN}${BOLD}$(_setaf 5)${ESC_CLOSE}"
    local CYAN_BOLD="${ESC_OPEN}${BOLD}$(_setaf 6)${ESC_CLOSE}"
    local WHITE_BOLD="${ESC_OPEN}${BOLD}$(_setaf 7)${ESC_CLOSE}"

    if tput setaf 1 &> /dev/null; then
        if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
          AWESOME_MAGENTA=$(tput setaf 9)
          AWESOME_ORANGE=$(tput setaf 172)
          AWESOME_GREEN=$(tput setaf 190)
          AWESOME_PURPLE=$(tput setaf 141)
          AWESOME_WHITE=$(tput setaf 0)
        else
          AWESOME_MAGENTA=$(tput setaf 5)
          AWESOME_ORANGE=$(tput setaf 4)
          AWESOME_GREEN=$(tput setaf 2)
          AWESOME_PURPLE=$(tput setaf 1)
          AWESOME_WHITE=$(tput setaf 7)
        fi
        AWESOME_BOLD=$(tput bold)
        AWESOME_RESET=$(tput sgr0)
    else
        AWESOME_MAGENTA="\033[1;31m"
        AWESOME_ORANGE="\033[1;33m"
        AWESOME_GREEN="\033[1;32m"
        AWESOME_PURPLE="\033[1;35m"
        AWESOME_WHITE="\033[1;37m"
        AWESOME_BOLD=""
        AWESOME_RESET="\033[m"
    fi

    # Expose the variables we need in prompt command
    # Solarized Prompt
    P_USER=${GREEN}${USER_SYMBOL}
    P_AT_SIGN=${P_YELLOW}@
    P_HOST=${BLUE}${HOST_SYMBOL}
    P_PWD_COLOR=${PINK}
    P_GIT_COLOR=${GREEN}
    P_END_PROMPT_COLOR=${PINK}

    # Awesome Prompt
    # P_USER=${AWESOME_BOLD}${AWESOME_MAGENTA}${USER_SYMBOL}
    # P_AT_SIGN=${AWESOME_YELLOW}@
    # P_HOST=${AWESOME_ORANGE}${HOST_SYMBOL}
    # P_PWD_COLOR=${AWESOME_YELLOW}
    # P_GIT_COLOR=${AWESOME_PURPLE}
    # P_END_PROMPT_COLOR=${AWESOME_MAGENTA}

    P_RED=${RED}
    P_RESET=${RESET}
}

bash_prompt_command() {

    local EXIT_CODE=$?
    local P_EXIT=""
    local MAXLENGTH=35
    local TRUNC_SYMBOL=".."
    local DIR=${PWD##*/}
    local P_PWD=${PWD/#$HOME/\~}

    MAXLENGTH=$(( ( MAXLENGTH < ${#DIR} ) ? ${#DIR} : MAXLENGTH ))

    local OFFSET=$(( ${#P_PWD} - MAXLENGTH ))

    if [ ${OFFSET} -gt "0" ]; then
        P_PWD=${P_PWD:$OFFSET:$MAXLENGTH}
        P_PWD=${TRUNC_SYMBOL}/${P_PWD#*/}
    fi

    # Update terminal title
    if [[ $TERM == xterm* ]]; then
        echo -ne "\033]0;${P_PWD}\007"
    fi

    # Parse Git branch name
    P_GIT=$(parse_git_branch)

    # Exit code
    if [[ $EXIT_CODE != 0 ]]; then
        P_EXIT+="${P_RED}âœ˜ "
    fi

    # Solarized Prompt
    # PS1="${P_EXIT}${P_USER}${P_AT_SIGN}${P_HOST} ${P_PWD_COLOR}${P_PWD}${P_GIT_COLOR}${P_GIT}${P_YELLOW} > \n${P_RESET}"
    # Awesome Prompt
    PS1="${P_EXIT}${P_USER}${P_AT_SIGN}${P_HOST} ${P_PWD_COLOR}${P_PWD}${P_GIT_COLOR}${P_GIT}${P_END_PROMPT_COLOR} > \n${P_RESET}$ "
}

parse_git_branch() {
    local OUT=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ "$OUT" != "" ]; then echo " $OUT"; fi
}

_bash_prompt_config
unset _bash_prompt_config

if $SHELL_BASH; then
    PROMPT_COMMAND=bash_prompt_command
else
    # Assume zsh
    function precmd {
        bash_prompt_command
    }
fi
